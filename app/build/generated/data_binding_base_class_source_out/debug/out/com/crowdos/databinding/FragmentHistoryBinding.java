// Generated by view binder compiler. Do not edit!
package com.crowdos.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.crowdos.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHistoryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView background3;

  @NonNull
  public final TextView blank1;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final TextView signature3;

  @NonNull
  public final TextView signatureBlank3;

  @NonNull
  public final TextView userBack2;

  @NonNull
  public final TextView userName3;

  @NonNull
  public final TextView userName4;

  private FragmentHistoryBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView background3,
      @NonNull TextView blank1, @NonNull ImageView imageView3, @NonNull TextView signature3,
      @NonNull TextView signatureBlank3, @NonNull TextView userBack2, @NonNull TextView userName3,
      @NonNull TextView userName4) {
    this.rootView = rootView;
    this.background3 = background3;
    this.blank1 = blank1;
    this.imageView3 = imageView3;
    this.signature3 = signature3;
    this.signatureBlank3 = signatureBlank3;
    this.userBack2 = userBack2;
    this.userName3 = userName3;
    this.userName4 = userName4;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.background3;
      ImageView background3 = ViewBindings.findChildViewById(rootView, id);
      if (background3 == null) {
        break missingId;
      }

      id = R.id.blank1;
      TextView blank1 = ViewBindings.findChildViewById(rootView, id);
      if (blank1 == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.signature3;
      TextView signature3 = ViewBindings.findChildViewById(rootView, id);
      if (signature3 == null) {
        break missingId;
      }

      id = R.id.signature_blank3;
      TextView signatureBlank3 = ViewBindings.findChildViewById(rootView, id);
      if (signatureBlank3 == null) {
        break missingId;
      }

      id = R.id.user_back2;
      TextView userBack2 = ViewBindings.findChildViewById(rootView, id);
      if (userBack2 == null) {
        break missingId;
      }

      id = R.id.user_name3;
      TextView userName3 = ViewBindings.findChildViewById(rootView, id);
      if (userName3 == null) {
        break missingId;
      }

      id = R.id.user_name4;
      TextView userName4 = ViewBindings.findChildViewById(rootView, id);
      if (userName4 == null) {
        break missingId;
      }

      return new FragmentHistoryBinding((ConstraintLayout) rootView, background3, blank1,
          imageView3, signature3, signatureBlank3, userBack2, userName3, userName4);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
